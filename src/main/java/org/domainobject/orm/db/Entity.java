package org.domainobject.orm.db;

import java.sql.Connection;
import java.sql.PreparedStatement;

/**
 * An {@code Entity} represents the database entity that a persistent class maps
 * to. An entity can be a table, a view, or a &#34;live&#34; SQL SELECT query.
 * Each persistent class maps to a single entity, and each instance of that
 * class maps to a single row within that entity.
 */
public interface Entity {

	public static enum Type {
		TABLE, VIEW, NESTED_QUERY
	}

	String getName();

	/**
	 * Get entity's columns.
	 * 
	 * @return The columns
	 */
	Column[] getColumns();

	/**
	 * Get the columns constituting the primary key of the entity. If the
	 * {@code Entity} has no primary key, an empty {@link Column} array must be
	 * returned; if the primary key cannot be determined, null must be returned.
	 * 
	 * @return The columns constituting the primary key or null if the primary
	 *         key canot be determined.
	 */
	Column[] getPrimaryKeyColumns();

	/**
	 * Get the columns whose value is generated by the database. No assumption
	 * is made about how this mechanism is implemented. It could an Oracle-type
	 * sequence or a MySQL-type auto-increment mechanism. The columns returned
	 * by this method are passed as the second argument to
	 * {@link Connection#prepareStatement(String, String[])
	 * Connection.prepareStatement}, and they are used to retrieve the generated
	 * values with {@link PreparedStatement#getGeneratedKeys()
	 * PreparedStatement.getGeneratedKeys}.
	 * 
	 * @return The columns whose value is generated by some sort of
	 *         key-generating mechanism
	 */
	Column[] getGeneratedKeyColumns();

	/**
	 * Get the columns constituting the foreign key to another entity
	 * 
	 * @param parent
	 *            The {@code Entity} that is the relational parent of this
	 *            {@code Entity}
	 * @return The foreign columns
	 */
	Column[] getForeignKeyColumns(Entity parent);

}
